eval_result_t evaluate_variable(basic_state_t* state, parser_state_t* parser_ptr, const char* var_name) {
    eval_result_t result = {0};
    
    // 配列アクセスかチェック
    token_t next_token = get_next_token(state, parser_ptr);
    if (next_token.type == TOKEN_DELIMITER && next_token.value.operator == '(') {
        // 配列アクセス
        uint16_t indices[MAX_ARRAY_DIMENSIONS];
        uint8_t index_count = 0;
        
        while (index_count < MAX_ARRAY_DIMENSIONS) {
            eval_result_t index_result = evaluate_expression(state, parser_ptr);
            if (has_error(state) || index_result.type != 0) {
                set_error(state, ERR_TYPE_MISMATCH, "Numeric index expected");
                return result;
            }
            
            indices[index_count++] = (uint16_t)numeric_to_double(index_result.value.num);
            
            token_t sep_token = get_next_token(state, parser_ptr);
            if (sep_token.type == TOKEN_DELIMITER && sep_token.value.operator == ',') {
                continue; // 次のインデックスへ
            } else if (sep_token.type == TOKEN_DELIMITER && sep_token.value.operator == ')') {
                break; // インデックス終了
            } else {
                set_error(state, ERR_SYNTAX, ", or ) expected in array access");
                return result;
            }
        }
        
        result = access_array_element(state, var_name, indices, index_count);
    } else {
        // 単純変数
        variable_t* var = find_variable(state, var_name);
        if (!var) {
            // 未定義変数は0または空文字列として扱う
            bool is_string = strchr(var_name, '$') != NULL;
            if (is_string) {
                result.type = 1;
                result.value.str.data = (char*)malloc(1);
                if (result.value.str.data) {
                    result.value.str.data[0] = '\0';
                    result.value.str.length = 0;
                }
            } else {
                result.type = 0;
                result.value.num = double_to_numeric(0.0);
            }
        } else {
            if (var->type == VAR_NUMERIC) {
                result.type = 0;
                result.value.num = var->value.num;
            } else if (var->type == VAR_STRING) {
                result.type = 1;
                result.value.str.data = safe_string_dup(var->value.str.data, MAX_STRING_LENGTH);
                result.value.str.length = result.value.str.data ? strlen(result.value.str.data) : 0;
            } else {
                set_error(state, ERR_TYPE_MISMATCH, "Invalid variable type");
            }
        }
    }
    
    return result;
}

// 関数の評価
eval_result_t evaluate_function(basic_state_t* state, parser_state_t* parser_ptr, uint8_t function_id) {
    eval_result_t result = {0};
    
    // 開き括弧
    token_t open_paren = get_next_token(state, parser_ptr);
    if (open_paren.type != TOKEN_DELIMITER || open_paren.value.operator != '(') {
        set_error(state, ERR_SYNTAX, "( expected after function name");
        return result;
    }
    
    switch (function_id) {
        case 0xAE: // SGN
        case 0xAF: // INT
        case 0xB0: // ABS
        case 0xB4: // SQR
